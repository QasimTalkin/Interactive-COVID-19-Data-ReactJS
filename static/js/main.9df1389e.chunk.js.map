{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Country/Country.jsx","components/Chart/Chart.jsx","App.js","index.js","App.module.css","components/Country/Country.module.css","components/Chart/Chart.module.css","images/logo.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","value","end","duration","separator","Date","toString","slice","url","fetchData","country","a","changedUrl","axios","get","console","log","fetchDailyData","modData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Country","handelCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","setDailyData","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","doughnutChart","options","title","display","text","App","state","fetchedData","setState","this","image","src","logo","alt","React","Component","startTime","performance","now","ReactDOM","render","document","getElementById","endTime","toFixed"],"mappings":"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","file":"static/js/main.9df1389e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data : {confirmed, recovered, deaths, lastUpdate}}) => {\n     if (!confirmed){\n         return \"Loading..\"\n     }\n    return (\n        \n        <div className = {styles.container}>\n            <Grid container spacing= {3} justify = \"center\">\n\n\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp start = {confirmed.value-5000} end ={confirmed.value} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography color = \"textSecondary\"> {new Date(lastUpdate).toString().slice(0,15) }</Typography>\n                        <Typography color = \"textSecondary\"> {new Date(lastUpdate).toString().slice(15,28) }</Typography>\n                    </CardContent>\n                </Grid>\n\n                \n                <Grid item component={Card} xs={12} md={3}  className = {cx(styles.card, styles.recovered)} >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp start = {recovered.value-5000} end ={recovered.value} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography color = \"textSecondary\"> {new Date(lastUpdate).toString().slice(0,15) }</Typography>\n                        <Typography color = \"textSecondary\"> {new Date(lastUpdate).toString().slice(15,28) }</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3}  className = {cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\"> \n                            <CountUp start = {deaths.value-5000} end ={deaths.value} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography color = \"textSecondary\"> {new Date(lastUpdate).toString().slice(0,15) }</Typography>\n                        <Typography color = \"textSecondary\"> {new Date(lastUpdate).toString().slice(15,28) }</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\n// data for our cards \nexport const fetchData = async (country) => {\n\n    let changedUrl = url;\n\n    //data based on country \n    if (country){\n         changedUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const {data :{confirmed, recovered, deaths, lastUpdate }} = await axios.get(changedUrl);\n        return {confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        console.log(error)\n    }\n}\n// Data for charts\nexport const fetchDailyData  = async () => {\n\n    try {\n\n        const {data} = await axios(`${url}/daily`);\n\n        const modData = data.map((dailyData)=>({\n            confirmed:dailyData.confirmed.total,\n            deaths:dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n\n        return modData;\n    } catch (error) {\n        console.log(error)\n    }\n}\n// Data for country list\nexport const fetchCountries = async () => {\n\n    try {\n\n        const {data: {countries}} = await axios(`${url}/countries`); \n        return countries.map((country)=> country.name); \n    } catch (error) {\n        console.log(error)\n    }\n}","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport {NativeSelect, FormControl} from '@material-ui/core'\nimport styles from './Country.module.css'\nimport {fetchCountries} from '../../api'\n\nconst Country = ({handelCountryChange}) => {\n   const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect( () => {\n       const fetchCountriesAPI = async () => {\n           setFetchedCountries (await fetchCountries());\n       }\n       fetchCountriesAPI();\n    }, [setFetchedCountries]);\n\n    return (\n       <div>\n       <FormControl className={styles.formControl}>\n        <NativeSelect defaultValue=\"\" onChange={(e) => handelCountryChange(e.target.value)}>\n            <option value = \"\"> Global </option>\n            {fetchedCountries.map((country, i)=><option key={i} value={country}>{country}</option>)}\n        </NativeSelect>\n       </FormControl>\n       \n       </div> \n       \n    )\n\n\n\n\n}\n\n\n\nexport default Country; ","import React from 'react';\nimport {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport { Line, Doughnut } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) => {\n    const [dailyData, setDailyData]=useState([]);\n//load daily data\n    useEffect(()=>{\n        const fetchAPI = async() => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    //lineChart Global    \n    const lineChart = (\n        //if there is data available load line chart or return null (if)?{this}{that}\n        dailyData.length \n    ?( <Line\n            data = {\n                    {labels:dailyData.map(({date})=>date), \n                        datasets:[\n                            {\n                                data:dailyData.map(({confirmed})=> confirmed),\n                                label:'Total Infected',\n                                borderColor:'#3333ff',\n                                backgroundColor:'rgba(0, 0, 255, 0.2)',\n                                fill:true\n                            }, \n                            {\n                                data:dailyData.map(({deaths})=> deaths),\n                                label:'Deaths',\n                                borderColor:'red', \n                                backgroundColor:'rgba(255,0,0,0.5)',\n                                fill:true,\n                            }\n                        ],\n                    }\n                }\n\n\n        /> ): null\n    ) // line chart\n\n    const doughnutChart = (\n        confirmed \n        ?(\n        <Doughnut \n            data= {{\n                labels:['Infected', 'Recovered', 'Death'],\n                datasets: [\n                    {\n                        backgroundColor: ['royalblue','rgb(58, 175, 58)', 'rgba(206, 46, 46, 0.925)'],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    }\n                ], \n                \n            }}\n\n            options = {{\n                \n                          title:{display:true, text:`Current State in ${country}`},\n\n            }}\n        /> \n        ) : null\n\n    );  \n            console.log(country);\n     return (\n       <div className={styles.container}>\n          \n            {country ? doughnutChart:lineChart}\n       </div>\n    )\n} \n\nexport default Chart;","import React from 'react';\nimport {Cards, Country, Chart} from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport logo from './images/logo.png'\nclass App extends React.Component {\n\n    state = {\n        data : {},\n        country : '',\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        //console.log(fetchedData);\n        this.setState({data:fetchedData})\n    }\n\n    handelCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({data:fetchedData, country:country})\n        //console.log(country);\n    }\n\n    render () {\n        \n        const {data, country} = this.state; // fetched data to be passed as props \n        return (\n            <div className={styles.container}>\n                <img className={styles.image} src={logo} alt='COVID-19'/>\n                <Cards data={data} />\n                <Country handelCountryChange={this.handelCountryChange}/>\n                <Chart data={data} country={country}/>\n           </div>\n        )\n    }\n}\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nvar startTime = performance.now();\nReactDOM.render(<App/>, document.getElementById('root')); \nvar endTime = performance.now();\nconsole.log(`App render time : ${((endTime - startTime)/100).toFixed(2)}s`)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__3h-YE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","module.exports = __webpack_public_path__ + \"static/media/logo.6b43a751.png\";"],"sourceRoot":""}